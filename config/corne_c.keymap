/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT    0
#define NUMSYMB    1
#define NAVIGATION  2
#define SHORTCUTS   3

/ {
    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
        };

        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0";
            #binding-cells = <0>;
            bindings = <&ht ESCAPE BACKSLASH>, <&kp TAB>;
        };

        td3: td3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD3";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 3>;
        };

        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWERTY";
            bindings = <
&HMR LEFT_COMMAND TAB     &kp Q  &kp W  &kp E         &kp R  &kp T                  &kp Y        &kp U  &kp I          &kp O       &kp P                &kp BACKSPACE
&HMR LEFT_CONTROL ESCAPE  &kp A  &kp S  &kp D         &kp F  &kp G                  &kp H        &kp J  &kp K          &kp L       &HMR RIGHT_ALT SEMI  &HMR RIGHT_CONTROL APOSTROPHE
&kp LEFT_SHIFT            &kp Z  &kp X  &kp C         &kp V  &kp B                  &kp N        &kp M  &kp COMMA      &kp PERIOD  &kp FSLH             &kp RIGHT_SHIFT
                                        &kp LEFT_ALT  &mo 1  &HMR LEFT_WIN SPACE    &lt 3 ENTER  &mo 2  &kp RIGHT_WIN
            >;
        };

        lower_layer {
            label = "NUMSYMB";
            bindings = <
&HMR LEFT_WIN TAB         &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT    &kp CARET      &kp AMPERSAND  &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BSPC
&HMR LEFT_CONTROL ESCAPE  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5         &kp MINUS      &kp EQUAL      &kp BACKSLASH   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE
&kp LEFT_SHIFT            &kp NUMBER_6     &kp N7        &kp N8        &kp N9        &kp N0         &kp GRAVE      &kp PLUS       &kp UNDERSCORE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp TILDE
                                                         &kp LEFT_ALT  &trans        &kp SPACE      &kp RIGHT_WIN  &kp DELETE     &kp RIGHT_ALT
            >;
        };

        raise_layer {
            label = "NAVIGATION";
            bindings = <
&kp TAB     &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6    &kp F7    &kp F8   &kp F9     &kp F10        &kp BSPC
&kp ESCAPE  &kp F11       &kp F12       &none         &none         &none           &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT  &kp PG_UP      &kp CAPSLOCK
&kp LSHFT   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp HOME  &kp END   &kp INS  &none      &kp PAGE_DOWN  &none
                                        &bt BT_CLR    &none         &kp LEFT_WIN    &kp RET   &none     &none
            >;
        };

        layer_3 {
            label = "SHORTCUTS";
            bindings = <
&kp LG(LA(ESCAPE))  &kp C_PREVIOUS  &kp C_PP        &kp C_NEXT      &none           &kp LS(LG(T))     &none          &kp LG(Z)           &kp LG(LS(Z))        &kp LG(LS(G))  &none              &none
&kp CAPSLOCK        &none           &kp LS(LG(N2))  &kp LS(LG(N3))  &kp LS(LG(N4))  &kp LS(LG(N5))    &kp LS(LA(H))  &kp LG(LEFT_BRACE)  &kp LG(RIGHT_BRACE)  &kp LS(LA(L))  &none              &none
&kp GLOBE           &none           &none           &kp LG(C)       &kp LG(V)       &kp LS(LG(V))     &kp LS(LA(B))  &kp LA(EQUAL)       &kp C_VOLUME_UP      &kp C_MUTE     &kp C_VOLUME_DOWN  &none
                                                    &kp LEFT_SHIFT  &none           &kp LG(SPACE)     &none          &none               &none
            >;
        };
    };
};
